apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
	mavenLocal()
    mavenCentral()
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.kuali.maven.wagons:maven-s3-wagon:1.2.1"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.3'

    // JUnit 5 dependencies for public test-writing API, and test engine, respectively.
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.5.1')
}
test {
    // Tells the 'test' task to enable JUnit 5 support
    useJUnitPlatform()
}
javadoc {
    title = 'mParticle Firehose Java SDK Reference'
    failOnError false
    getOptions().setNoTimestamp(true)
}
task javadocsJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
    archives javadocsJar
}


ext."signing.keyId" = System.getenv("mavenSigningKeyId")
ext."signing.secretKeyRingFile" = System.getenv("mavenSigningKeyRingFile")
ext."signing.password" = System.getenv("mavenSigningKeyPassword")

signing {	
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives	
}

def target_maven_repo
if (project.hasProperty('target_maven_repo')) {
    target_maven_repo = project.property('target_maven_repo')
}

uploadArchives {
    repositories {
        mavenDeployer {

            if (target_maven_repo == "s3") {
                configuration = configurations.deployerJars
                repository(url: "s3://maven.mparticle.com")
            } else if(target_maven_repo == 'sonatype') {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                }
            } else{
                repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
            }

            pom.project {
                version = '2.8.1'
                artifactId = 'java-sdk'
                groupId = 'com.mparticle'
                description 'mParticle Java SDK used to integrate with mParticle\'s Firehose API'
                name 'mParticle Java SDK'
                url 'https://github.com/mparticle/mparticle-sdk-java'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                    }
                }

                scm {
                    url 'http://github.com/mparticle/mparticle-android-java'
                    connection 'scm:git:http://github.com/mparticle/mparticle-android-java'
                    developerConnection 'scm:git:git@github.com:mparticle/mparticle-android-java.git'
                }
                developers {
                    developer {
                        id 'mParticle'
                        name 'mParticle Developers'
                        email 'developers@mparticle.com'
                    }
                }
            }
        }
    }
}
