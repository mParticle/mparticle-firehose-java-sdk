apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenLocal()
    mavenCentral()
}

dependencies {
    api 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    // JUnit 5 dependencies for public test-writing API, and test engine, respectively.
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
    testImplementation('org.junit.platform:junit-platform-launcher:1.5.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.5.1')
}

test {
    // Tells the 'test' task to enable JUnit 5 support
    useJUnitPlatform()
}

javadoc {
    title = 'mParticle Firehose Java SDK Reference'
    failOnError false
    getOptions().setNoTimestamp(true)
}

task generateJavadocsJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task generateSourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

def target_maven_repo
if (project.hasProperty('target_maven_repo')) {
    target_maven_repo = project.property('target_maven_repo')
}

allprojects {
    ext."signing.keyId" = System.getenv("mavenSigningKeyId")
    ext."signing.secretKeyRingFile" = System.getenv("mavenSigningKeyRingFile")
    ext."signing.password" = System.getenv("mavenSigningKeyPassword")
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'com.mparticle'
                artifactId = 'java-sdk'
                version = '2.9.1'
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                if (project.tasks.findByName('generateJavadocsJar')) {
                    artifact project.tasks.getByName('generateJavadocsJar')
                }

                if (project.tasks.findByName('generateSourcesJar')) {
                    artifact project.tasks.getByName('generateSourcesJar')
                }

                pom {
                    name = 'mParticle Java SDK'
                    description = 'mParticle Java SDK used to integrate with mParticle\'s Firehose API'
                    url = 'https://github.com/mparticle/mparticle-sdk-java'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'mParticle'
                            name = 'mParticle Developers'
                            email = 'developers@mparticle.com'
                        }
                    }
                    scm {
                        url = 'http://github.com/mparticle/mparticle-android-java'
                        connection = 'scm:git:http://github.com/mparticle/mparticle-android-java'
                        developerConnection = 'scm:git:git@github.com:mparticle/mparticle-android-java.git'
                    }
                }
            }
        }
        repositories {
            maven {
                if (target_maven_repo == "s3") {
                    url = "s3://maven.mparticle.com"
                    credentials(AwsCredentials) {
                        accessKey = System.env.AWS_ACCESS_KEY_ID ?: findProperty('aws_access_key_id')
                        secretKey = System.env.AWS_SECRET_ACCESS_KEY ?: findProperty('aws_secret_access_key')
                    }
                } else if(target_maven_repo == 'sonatype') {
                    url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username = System.getenv('SONATYPE_USERNAME')
                        password = System.getenv('SONATYPE_PASSWORD')
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                } else{
                    url = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("publishReleasePublicationToMavenRepository") }
        sign publishing.publications.release
    }
}

//Publishing task aliases for simpler local development
task publishReleaseLocal { dependsOn "publishReleasePublicationToMavenRepository" }

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}